{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","src","alt","length","width","Footer","style","fontSize","ResultHeader","hdr","years","number_format_default","value","total","displayType","thousandSeparator","prefix","decimalScale","fixedDecimalScale","ResultChart","data","labels","output","map","i","year","datasets","label","backgroundColor","borderColor","borderWidth","totalDeposit","totalInterest","es","options","scales","xAxes","stacked","yAxes","tooltips","mode","callbacks","tooltipItem","tooltipLabel","datasetIndex","tooltipValue","index","toFixed","replace","Result","textAlign","InputDetails","id","defaultValue","initialAmount","onChange","handleChange","type","min","htmlFor","annualDeposit","interest","yearsToGrow","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calcYearValues","tmp","sumInterest","amt","state","dep","yrs","int","tYearString","Date","getFullYear","concat","Number","totalValue","tDeposit","tInterest","tTotal","setState","bind","assertThisInitialized","event","name","target","notify","show","prevState","defineProperty","idx","notify_default","App_Header","App_InputDetails","App_ResultHeader","App_Result","App_ResultChart","App_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7ba7440.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport NumberFormat from 'react-number-format';\nimport './App.css';\n\n/* Materialize css */\nimport 'materialize-css';\nimport 'materialize-css/dist/css/materialize.min.css';\n\n/* Chart.js */\nimport { Bar } from 'react-chartjs-2';\n\n/* React-notify-toast */\nimport Notifications, { notify } from 'react-notify-toast';\n\nconst Header = (props) => {\n  return (\n    <header>\n      <div className=\"row teal darken-4 white-text card\">\n        <div className=\"col s1\">\n        </div>\n        <div className=\"col s10\">\n          <h5>Compound Interest Calculator</h5>\n        </div>\n        <div className=\"col s1\">\n          <img src=\"./ApcLogo.png\" alt=\"Apc\" length=\"55px\" width=\"55px\"></img>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nconst Footer = (props) => {\n  return (\n    <div style={{fontSize: '11px'}}>\n      <hr />\n      <span><p><b>Interactive Application using ES6 with React</b></p></span>\n      <span><p>Â© 2019 Copyright AC-Soft</p></span>\n    </div>\n  );\n};\n\nconst ResultHeader = (props) => {\n  let hdr;\n\n  if (props.years > 1) {\n    hdr = \n      <p>\n        You will have <b>\n          <NumberFormat \n            value={ props.total } \n            displayType={ 'text' } \n            thousandSeparator={ true }\n            prefix={ '$' }\n            decimalScale={ 2 }\n            fixedDecimalScale={ true }>  \n          </NumberFormat>\n        </b> in <b>{ props.years } years!</b>\n      </p>;\n  } else if (props.years === 1) {\n    hdr = \n      <p>\n        You will have <b>\n          <NumberFormat \n            value={ props.total } \n            displayType={ 'text' } \n            thousandSeparator={ true }\n            prefix={ '$ ' }\n            decimalScale={ 2 }\n            fixedDecimalScale={ true }>  \n          </NumberFormat> next year!\n        </b>\n      </p>;\n  } else {\n    hdr = <p>Calculate your investment returns</p>;\n  }\n\n  return (\n    <div style={{fontSize: '14px'}}>\n      { hdr }\n    </div>\n  );\n};\n\nconst ResultChart = (props) => {\n  /* Get specific values from props */\n  let chartLabels = props.output.map(i => i.year);\n  let chartInvested = props.output.map(i => i.totalDeposit);\n  let chartInterest = props.output.map(i => i.totalInterest);\n\n  let data = {\n    labels: chartLabels,\n    datasets: [{\n      label: 'Investment',\n      backgroundColor: 'rgba(75, 192, 192, 0.4)',\n      borderColor: 'rgb(75, 192, 192)',\n      borderWidth: 1,\n      data: chartInvested\n    }, {\n      label: 'Interest',\n      backgroundColor: 'rgba(54, 162, 235, 0.4)',\n      borderColor: 'rgb(54, 162, 235)',\n      borderWidth: 1,\n      data: chartInterest\n    }]\n  };\n\n  let options = {\n    scales: {\n      xAxes: [{ stacked: true }],\n      yAxes: [{ stacked: true }]\n    },\n    /* From stackoverflow */\n    /* https://stackoverflow.com/questions/39373561/how-get-sum-of-total-values-in-stackedbar-chartjs */\n    tooltips: {\n      mode: 'label',\n      callbacks: {\n        label: function(tooltipItem, data) {\n          let tooltipLabel = data.datasets[tooltipItem.datasetIndex].label;\n          let tooltipValue = data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];\n\n          // Loop through all datasets to get the actual total of the index\n          let total = 0;\n          for (let i = 0; i < data.datasets.length; i++)\n              total += data.datasets[i].data[tooltipItem.index];\n\n          // If it is not the last dataset, you display it as you usually do\n          if (tooltipItem.datasetIndex !== data.datasets.length - 1) {\n              return tooltipLabel + \": $\" + tooltipValue.toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,');\n          } else { // .. else, you display the dataset and the total, using an array\n              return [tooltipLabel + \": $\" + tooltipValue.toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,'), \n                \"Total: $\" + total.toFixed(2).replace(/(\\d)(?=(\\d{3})+\\.)/g, '$1,')];\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <div>\n      <Bar data={ data } options={ options }></Bar>\n    </div>\n  );\n};\n\nconst Result = (props) => {\n  return (\n    <div>\n      <div className=\"row\" style={{textAlign: 'left', fontSize: '12px'}}>\n        <div className=\"col s3\">\n          Total investment :\n          <br />\n          Total interest :\n        </div>\n        <div className=\"col s9\">\n          <NumberFormat \n            value={ props.totalDeposit } \n            displayType={ 'text' } \n            thousandSeparator={true}\n            prefix={ '$' }\n            decimalScale={ 2 }\n            fixedDecimalScale={ true }>  \n          </NumberFormat>\n          <br />\n          <NumberFormat \n            value={ props.totalInterest } \n            displayType={ 'text' } \n            thousandSeparator={true}\n            prefix={ '$' }\n            decimalScale={ 2 }\n            fixedDecimalScale={ true }>  \n          </NumberFormat>\n        </div>\n      </div>\n    </div>\n  ); \n};\n\nconst InputDetails = (props) => {\n  return (\n    <form>\n      <div className=\"row\">\n        <div className=\"input-field\">\n          <input \n            id=\"initialAmount\"\n            defaultValue={ props.initialAmount }\n            onChange={ props.handleChange } \n            type=\"number\"\n            className=\"validate\" \n            min=\"0\" />\n          <label htmlFor=\"initialAmount\">Initial Amount ($)</label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"input-field\">\n          <input \n            id=\"annualDeposit\" \n            defaultValue={ props.annualDeposit } \n            onChange={ props.handleChange } \n            type=\"number\" \n            className=\"validate\"\n            min=\"0\" />\n          <label htmlFor=\"annualDeposit\">Annual Addition ($)</label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"input-field\">\n          <input \n            id=\"interest\" \n            defaultValue={ props.interest } \n            onChange={ props.handleChange } \n            type=\"number\" \n            className=\"validate\"\n            min=\"0\" />\n          <label htmlFor=\"interest\">Interest Rate (%)</label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"input-field\">\n          <input \n            id=\"yearsToGrow\" \n            defaultValue={ props.yearsToGrow } \n            onChange={ props.handleChange } \n            type=\"number\" \n            className=\"validate\"\n            min=\"0\" />\n          <label htmlFor=\"yearsToGrow\">Years To Grow</label>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      initialAmount: null,\n      annualDeposit: null,\n      interest: null,\n      yearsToGrow: null,\n      output: [{\n        year: 'Start',\n        totalDeposit: 0,\n        totalInterest: 0,\n        totalValue: 0\n      }],\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  calcYearValues = () => {\n    let tmp = [];\n    \n    let sumInterest = 0;\n    let amt = this.state.initialAmount ? this.state.initialAmount : 0;\n    let dep = this.state.annualDeposit ? this.state.annualDeposit : 0;\n    let yrs = this.state.yearsToGrow ? this.state.yearsToGrow : 0;\n    let int = this.state.interest ? this.state.interest : 0;\n\n    let tYearString = (new Date()).getFullYear();\n  \n    for(let i = 0; i <= yrs; i++) {\n      if (i === 0) {\n        tmp = tmp.concat({\n          year: \"Start\",\n          totalDeposit: (Number(amt)),\n          totalInterest: 0,\n          totalValue: (Number(amt))\n        });\n      } else {\n        let tDeposit = Number(tmp[i - 1].totalDeposit) + Number(dep);\n        sumInterest = sumInterest + (Number(tmp[i - 1].totalValue) * (int / 100));\n        let tInterest = sumInterest;\n        let tTotal = Number(tDeposit) + Number(tInterest);\n        \n\n        tmp = tmp.concat({\n          year: (Number(tYearString) + Number(i)),\n          totalDeposit: tDeposit,\n          totalInterest: tInterest,\n          totalValue: tTotal\n        });\n      }\n    }\n    \n    this.setState({\n      output: tmp\n    });\n  };\n\n  handleChange(event) {\n    let name = event.target.id;\n    let value = event.target.value;\n\n    /* Validation here */\n    if (value < 0) {\n      notify.show('Please enter a positive value', 'warning');\n      return;\n    } else if (name === \"yearsToGrow\" && value > 100) {\n      notify.show('Years to grow has a maximum value of 100', 'warning');\n      value = 100;\n    }\n\n    this.setState(prevState => ({\n      [name]: value,\n    }), this.calcYearValues);\n  };\n\n  render() {\n    let idx = this.state.output.length - 1;\n\n    return (\n      <div className=\"App\">\n        <Notifications />\n        <Header />\n        <div className=\"row\">\n          <div className=\"col s3\">\n            <InputDetails \n              initialAmount={ this.state.initialAmount }\n              annualDeposit={ this.state.annualDeposit }\n              interest={ this.state.interest }\n              yearsToGrow={ this.state.yearsToGrow }\n              handleChange={ this.handleChange }/>\n          </div>\n          <div className=\"col s9\">\n            <div className=\"App-result\">\n              <ResultHeader years={ idx } total={ this.state.output[idx].totalValue }/>\n              <hr />\n              <Result \n                totalDeposit={ this.state.output[idx].totalDeposit } \n                totalInterest={ this.state.output[idx].totalInterest }/>\n              <hr />\n              <ResultChart output={ this.state.output }/>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}